// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Aircraft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AircraftTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AirlineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FirstSeen")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasSpecialLivery")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("AircraftTypeId");

                    b.HasIndex("AirlineId");

                    b.ToTable("Aircrafts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30bc296c-6b5e-4234-a31f-3a9918ed53a8"),
                            AddedOn = new DateTime(2022, 3, 25, 13, 35, 27, 64, DateTimeKind.Local).AddTicks(5350),
                            AircraftTypeId = new Guid("9ccfd83d-ff7b-4e76-8c12-7c0f0496b5c0"),
                            AirlineId = new Guid("53f04903-180c-4cc4-9bc7-e5d9a1630ee0"),
                            FirstSeen = new DateTime(2021, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasSpecialLivery = false,
                            LastSeen = new DateTime(2021, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2022, 3, 25, 13, 35, 27, 64, DateTimeKind.Local).AddTicks(5371),
                            Registration = "OO-SNJ"
                        },
                        new
                        {
                            Id = new Guid("99caa744-4cbd-4fba-bf5e-ceb600ebee26"),
                            AddedOn = new DateTime(2022, 3, 25, 13, 35, 27, 64, DateTimeKind.Local).AddTicks(5389),
                            AircraftTypeId = new Guid("3a504b2e-11ec-4725-b1ed-5babee959c4b"),
                            AirlineId = new Guid("3a368982-9f8c-4440-8dd7-abf13772175f"),
                            FirstSeen = new DateTime(2020, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasSpecialLivery = false,
                            LastSeen = new DateTime(2021, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2022, 3, 25, 13, 35, 27, 64, DateTimeKind.Local).AddTicks(5393),
                            Registration = "OO-LOE"
                        },
                        new
                        {
                            Id = new Guid("f552e1cc-10a8-4000-8fb3-4ccda599e88e"),
                            AddedOn = new DateTime(2022, 3, 25, 13, 35, 27, 64, DateTimeKind.Local).AddTicks(5401),
                            AircraftTypeId = new Guid("3d0fd8f6-e957-482a-9d3f-a0f93b2e78ec"),
                            AirlineId = new Guid("c76bb1ce-8f7d-4bf2-8157-096c1514c2e0"),
                            FirstSeen = new DateTime(2020, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasSpecialLivery = false,
                            LastSeen = new DateTime(2021, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2022, 3, 25, 13, 35, 27, 64, DateTimeKind.Local).AddTicks(5405),
                            Registration = "D-ALCC"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.AircraftAtAirport", b =>
                {
                    b.Property<Guid>("AircraftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AirportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AircraftId", "AirportId");

                    b.HasIndex("AirportId");

                    b.ToTable("AircraftAtAirports");

                    b.HasData(
                        new
                        {
                            AircraftId = new Guid("30bc296c-6b5e-4234-a31f-3a9918ed53a8"),
                            AirportId = new Guid("b55c30f0-2987-42b2-b667-0d3892c97692")
                        },
                        new
                        {
                            AircraftId = new Guid("30bc296c-6b5e-4234-a31f-3a9918ed53a8"),
                            AirportId = new Guid("3df73cd2-3ed7-41eb-afcd-3a4103b3e992")
                        },
                        new
                        {
                            AircraftId = new Guid("30bc296c-6b5e-4234-a31f-3a9918ed53a8"),
                            AirportId = new Guid("b2f35991-dc73-4a72-bbfe-cc4856d007fe")
                        },
                        new
                        {
                            AircraftId = new Guid("99caa744-4cbd-4fba-bf5e-ceb600ebee26"),
                            AirportId = new Guid("b55c30f0-2987-42b2-b667-0d3892c97692")
                        },
                        new
                        {
                            AircraftId = new Guid("99caa744-4cbd-4fba-bf5e-ceb600ebee26"),
                            AirportId = new Guid("3df73cd2-3ed7-41eb-afcd-3a4103b3e992")
                        },
                        new
                        {
                            AircraftId = new Guid("f552e1cc-10a8-4000-8fb3-4ccda599e88e"),
                            AirportId = new Guid("b2f35991-dc73-4a72-bbfe-cc4856d007fe")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.AircraftType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("EmptyWeight")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstFlight")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("ICAOCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength(true);

                    b.Property<double?>("Length")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double?>("WingSpan")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("AircraftTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ccfd83d-ff7b-4e76-8c12-7c0f0496b5c0"),
                            AddedOn = new DateTime(2022, 3, 25, 13, 35, 27, 58, DateTimeKind.Local).AddTicks(4753),
                            Brand = "Airbus",
                            EmptyWeight = 42400,
                            FirstFlight = new DateTime(1987, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 11.76,
                            ICAOCode = "A320",
                            Length = 37.57,
                            ModifiedOn = new DateTime(2022, 3, 25, 13, 35, 27, 63, DateTimeKind.Local).AddTicks(4246),
                            Type = "A320-200",
                            WingSpan = 34.100000000000001
                        },
                        new
                        {
                            Id = new Guid("3a504b2e-11ec-4725-b1ed-5babee959c4b"),
                            AddedOn = new DateTime(2022, 3, 25, 13, 35, 27, 63, DateTimeKind.Local).AddTicks(5028),
                            Brand = "Boeing",
                            EmptyWeight = 118000,
                            FirstFlight = new DateTime(2009, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 16.899999999999999,
                            ICAOCode = "B788",
                            Length = 56.700000000000003,
                            ModifiedOn = new DateTime(2022, 3, 25, 13, 35, 27, 63, DateTimeKind.Local).AddTicks(5046),
                            Type = "787-8",
                            WingSpan = 60.100000000000001
                        },
                        new
                        {
                            Id = new Guid("3d0fd8f6-e957-482a-9d3f-a0f93b2e78ec"),
                            AddedOn = new DateTime(2022, 3, 25, 13, 35, 27, 63, DateTimeKind.Local).AddTicks(5067),
                            Brand = "McDonnel Douglas",
                            EmptyWeight = 112748,
                            FirstFlight = new DateTime(1990, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 17.600000000000001,
                            ICAOCode = "MD11",
                            Length = 61.399999999999999,
                            ModifiedOn = new DateTime(2022, 3, 25, 13, 35, 27, 63, DateTimeKind.Local).AddTicks(5073),
                            Type = "MD-11",
                            WingSpan = 51.700000000000003
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Airline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FleetSize")
                        .HasColumnType("int");

                    b.Property<string>("HeadQuarter")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("ICAOCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("MainAirport")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Airlines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("53f04903-180c-4cc4-9bc7-e5d9a1630ee0"),
                            AddedOn = new DateTime(2022, 3, 25, 13, 35, 27, 63, DateTimeKind.Local).AddTicks(8094),
                            FleetSize = 49,
                            HeadQuarter = "Diegem, België",
                            IATACode = "SN",
                            ICAOCode = "BEL",
                            MainAirport = "Brussels Airport",
                            ModifiedOn = new DateTime(2022, 3, 25, 13, 35, 27, 63, DateTimeKind.Local).AddTicks(8114),
                            Name = "Brussels Airlines"
                        },
                        new
                        {
                            Id = new Guid("3a368982-9f8c-4440-8dd7-abf13772175f"),
                            AddedOn = new DateTime(2022, 3, 25, 13, 35, 27, 63, DateTimeKind.Local).AddTicks(8131),
                            FleetSize = 32,
                            HeadQuarter = "Zaventem, België",
                            IATACode = "TB",
                            ICAOCode = "JAF",
                            MainAirport = "Brussels Airport",
                            ModifiedOn = new DateTime(2022, 3, 25, 13, 35, 27, 63, DateTimeKind.Local).AddTicks(8135),
                            Name = "TUI Fly"
                        },
                        new
                        {
                            Id = new Guid("c76bb1ce-8f7d-4bf2-8157-096c1514c2e0"),
                            AddedOn = new DateTime(2022, 3, 25, 13, 35, 27, 63, DateTimeKind.Local).AddTicks(8142),
                            FleetSize = 18,
                            HeadQuarter = "Frankfurt, Duitsland",
                            IATACode = "LH",
                            ICAOCode = "GEC",
                            MainAirport = "Frankfurt am Main",
                            ModifiedOn = new DateTime(2022, 3, 25, 13, 35, 27, 63, DateTimeKind.Local).AddTicks(8145),
                            Name = "Lufthansa Cargo"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ElevationAMSL")
                        .HasPrecision(4)
                        .HasColumnType("int");

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("ICAOCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("RunwayAmount")
                        .HasPrecision(2)
                        .HasColumnType("int");

                    b.Property<int?>("TerminalAmount")
                        .HasPrecision(2)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b55c30f0-2987-42b2-b667-0d3892c97692"),
                            AddedOn = new DateTime(2022, 3, 25, 13, 35, 27, 64, DateTimeKind.Local).AddTicks(1767),
                            City = "Zaventem",
                            Country = "België",
                            ElevationAMSL = 56,
                            IATACode = "BRU",
                            ICAOCode = "EBBR",
                            ModifiedOn = new DateTime(2022, 3, 25, 13, 35, 27, 64, DateTimeKind.Local).AddTicks(1785),
                            Name = "Brussels Airport",
                            RunwayAmount = 3,
                            TerminalAmount = 1
                        },
                        new
                        {
                            Id = new Guid("3df73cd2-3ed7-41eb-afcd-3a4103b3e992"),
                            AddedOn = new DateTime(2022, 3, 25, 13, 35, 27, 64, DateTimeKind.Local).AddTicks(1802),
                            City = "Nice",
                            Country = "Frankrijk",
                            ElevationAMSL = 4,
                            IATACode = "NCE",
                            ICAOCode = "LFMN",
                            ModifiedOn = new DateTime(2022, 3, 25, 13, 35, 27, 64, DateTimeKind.Local).AddTicks(1807),
                            Name = "Nice Côte d'Azur",
                            RunwayAmount = 2,
                            TerminalAmount = 3
                        },
                        new
                        {
                            Id = new Guid("b2f35991-dc73-4a72-bbfe-cc4856d007fe"),
                            AddedOn = new DateTime(2022, 3, 25, 13, 35, 27, 64, DateTimeKind.Local).AddTicks(1830),
                            City = "Narita",
                            Country = "japan",
                            ElevationAMSL = 41,
                            IATACode = "NRT",
                            ICAOCode = "RJAA",
                            ModifiedOn = new DateTime(2022, 3, 25, 13, 35, 27, 64, DateTimeKind.Local).AddTicks(1833),
                            Name = "Tokyo Narita Intl. Airport",
                            RunwayAmount = 2,
                            TerminalAmount = 3
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Aircraft", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.AircraftType", "AircraftType")
                        .WithMany("Aircrafts")
                        .HasForeignKey("AircraftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Airline", "Airline")
                        .WithMany("Aircrafts")
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AircraftType");

                    b.Navigation("Airline");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.AircraftAtAirport", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Aircraft", "Aircraft")
                        .WithMany("SpottedAtAirports")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Airport", "Airport")
                        .WithMany("AircraftsAtAirport")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Aircraft", b =>
                {
                    b.Navigation("SpottedAtAirports");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.AircraftType", b =>
                {
                    b.Navigation("Aircrafts");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Airline", b =>
                {
                    b.Navigation("Aircrafts");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Airport", b =>
                {
                    b.Navigation("AircraftsAtAirport");
                });
#pragma warning restore 612, 618
        }
    }
}
