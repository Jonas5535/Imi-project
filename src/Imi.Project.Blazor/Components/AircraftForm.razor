<div class="d-flex">
	<button class="btn btn-circle align-self-center mb-2 mr-4 oi oi-arrow-left" @onclick="e => OnBackClicked.InvokeAsync()"></button>
	<h1 class="d-inline align-self-center mr-auto">@PageTitle</h1>
</div>


<EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label for="registration">Registratienummer:</label>
		<InputText id="registration" @bind-Value="Model.Registration" class="form-control w-auto" />
		<ValidationMessage For="@(() => Model.Registration)" />
	</div>
	<div class="form-group">
		<label for="type">Type:</label>
		<InputSelect id="type" @bind-Value="Model.AircraftTypeId" class="form-control w-auto">
			@{
				if (Types != null)
				{
					foreach (var type in Types)
					{
							<option value="@type.Value">@type.Label</option>
					}
				}
			}
		</InputSelect>
		<ValidationMessage For="@(() => Model.AircraftTypeId)" />
	</div>
	<div class="form-group">
		<label for="airline">Maatschappij:</label>
		<InputSelect id="airline" @bind-Value="Model.AirlineId" class="form-control w-auto">
			@{
				if (Airlines != null)
				{
					foreach (var airline in Airlines)
					{
						<option value="@airline.Value">@airline.Label</option>
					}
				}
			}
		</InputSelect>
		<ValidationMessage For="@(() => Model.AirlineId)" />
	</div>
	<div class="form-group">
		<label for="specialLivery">Special livery:</label>
		<InputCheckbox id="specialLivery" @bind-Value="Model.HasSpecialLivery" class="form-control w-35px" />
		<ValidationMessage For="@(() => Model.HasSpecialLivery)" />
	</div>
	<div class="form-group">
		<label for="firstSeen">Eerst gezien:</label>
		<InputDate id="firstSeen" @bind-Value="Model.FirstSeen" class="form-control w-auto" />
		<ValidationMessage For="@(() => Model.FirstSeen)"></ValidationMessage>
	</div>
	<div class="form-group">
		<label for="lastSeen">Laatst gezien:</label>
		<InputDate id="lastSeen" @bind-Value="Model.LastSeen" class="form-control w-auto" />
		<ValidationMessage For="@(() => Model.LastSeen)"></ValidationMessage>
		<label for="LastSeen" class="validation-message mb-0 @displayState">@lastSeenError</label>
	</div>
	<div class="form-group">
		<label for="airport">Luchthavens:</label>
		<InputSelect id="airport" @bind-Value="SelectedAirport" class="form-control w-auto">
			@{
				if (Airports != null)
				{
					foreach (var airport in Airports)
					{
						<option value="@airport.Value">@airport.Label</option>
					}
				}
			}
		</InputSelect>
		<ValidationMessage For="@(() => Model.AirportIds)" />
	</div>
	<button type="submit" class="btn mb-1">Opslaan</button>
</EditForm>

@code {
	[Parameter]
	public AircraftFormViewModel Model { get; set; }
	[Parameter]
	public string PageTitle { get; set; }
	[Parameter]
	public IEnumerable<InputSelectItem> Types { get; set; }
	[Parameter]
	public IEnumerable<InputSelectItem> Airlines { get; set; }
	[Parameter]
	public IEnumerable<InputSelectItem> Airports { get; set; }
	[Parameter]
	public EventCallback OnSubmitClicked { get; set; }
	[Parameter]
	public EventCallback OnBackClicked { get; set; }
	private const string displayStateInvisible = "invisible";
	private const string displayStateVisible = "visible";
	private string displayState = displayStateInvisible;
	private string lastSeenError;
	private Guid selectedAirport;

	public Guid SelectedAirport
	{
		get { return selectedAirport; }
		set
		{
			selectedAirport = value;
			if (value != Guid.Empty)
			{
				Model.AirportIds.Clear();
				Model.AirportIds.Add(SelectedAirport);
			}
		}
	}

	protected override void OnInitialized()
	{
		SelectedAirport = Model.AirportIds.FirstOrDefault();
	}

	private void HandleValidSubmit()
	{
		if (!ValidateLastSeen(Model.LastSeen)) return;

		OnSubmitClicked.InvokeAsync();
	}

	private bool ValidateLastSeen(DateTime lastSeen)
	{
		if (lastSeen < Model.FirstSeen)
		{
			displayState = displayStateVisible;
			lastSeenError = "De datum van laatst gezien kan niet vroeger zijn dan de datum van eerst gezien";
			return false;
		}
		else
		{
			displayState = displayStateInvisible;
			lastSeenError = null;
			return true;
		}
	}
}
