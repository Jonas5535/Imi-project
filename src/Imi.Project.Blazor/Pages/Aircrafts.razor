@page "/aircraft"
@inject ICRUDService<AircraftListViewModel, Aircraft> _aircraftService
@inject IJSRuntime _jsRuntime

@if (showDetails)
{
	<AircraftDetail Model="aircraft"
		OnBackClicked="GoBack"
		OnDeleteClicked="DeleteAsync">
	</AircraftDetail>
}
else if (formModel != null)
{
	<AircraftForm Model="formModel"
		PageTitle="@formPageTitle">
	</AircraftForm>
}
else
{
	<div class="d-flex">
		<h1 class="d-inline align-self-center mr-auto">Vliegtuigen</h1>
		<button class="btn btn-circle align-self-center mb-2 mr-2 oi oi-plus" @onclick="e => ShowForm(null)"></button>
	</div>
	<div class="row">
		@foreach (var aircraft in aircrafts)
		{
			<ListItem Model="aircraft"
				OnCardClicked="ShowDetails"
				OnDeleteClicked="DeleteAsync">
			</ListItem>
		}
	</div>
}

@code {
	private IEnumerable<AircraftListViewModel> aircrafts = new List<AircraftListViewModel>();
	private Aircraft aircraft;
	private bool showDetails = false;
	private string formPageTitle;
	private Aircraft formModel;

	protected override async Task OnInitializedAsync()
	{
		await ShowList();
	}

	public async Task ShowList()
	{
		aircrafts = await _aircraftService.ListAllAsync();
	}

	public async Task ShowDetails(object item)
	{
		AircraftListViewModel receivedModel = item as AircraftListViewModel;
		aircraft = await _aircraftService.GetByIdAsync(receivedModel.Id);
		showDetails = true;
	}

	public async Task DeleteAsync(object item)
	{
		bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", "Ben je zeker dat je dit vliegtuig wilt verwijderen?");

		if (confirmed)
		{
			Guid id = (Guid)item;
			await _aircraftService.DeleteAsync(id);
			await ShowList();
		}

		if (showDetails)
		{
			GoBack();
		}
	}

	public void GoBack()
	{
		showDetails = false;
		aircraft = null;
	}

	public void ShowForm(object item)
	{
		if (item == null)
		{
			formModel = new Aircraft();
			formModel.Id = new Guid();
			formPageTitle = "Nieuw vliegtuig";
		}
	}
}
