@page "/aircraft"
@inject IAircraftService _aircraftService
@inject IJSRuntime _jsRuntime

@if (formModel != null)
{
	<AircraftForm Model="formModel"
			  PageTitle="@formPageTitle"
			  Types="selectTypes"
			  Airlines="selectAirlines"
			  Airports="selectAirports"
			  OnSubmitClicked="SaveAsync"
			  OnBackClicked="GoBack">
	</AircraftForm>
}
else if (showDetails)
{
	<AircraftDetail Model="aircraft"
				OnBackClicked="GoBack"
				OnDeleteClicked="DeleteAsync"
				OnEditClicked="ShowForm">
	</AircraftDetail>
}
else
{
	<div class="d-flex">
		<h1 class="d-inline align-self-center mr-auto">Vliegtuigen</h1>
		<button class="btn btn-circle align-self-center mb-2 mr-2 oi oi-plus" @onclick="e => ShowForm(null)"></button>
	</div>
	<div class="row">
		@foreach (var aircraft in aircrafts)
		{
			<List Model="aircraft"
			  OnCardClicked="ShowDetails"
			  OnDeleteClicked="DeleteAsync"
			  OnEditClicked="ShowForm">
			</List>
		}
	</div>
}

@code {
	private IEnumerable<AircraftListViewModel> aircrafts = new List<AircraftListViewModel>();
	private AircraftDetailViewModel aircraft;
	private bool showDetails = false;
	private bool isNew = true;
	private string formPageTitle;
	private AircraftFormViewModel formModel;
	private IEnumerable<InputSelectItem> selectTypes;
	private IEnumerable<InputSelectItem> selectAirlines;
	private IEnumerable<InputSelectItem> selectAirports;
	private const string errorQuestion = "Wilt u de data opnieuw proberen laden?";
	private const string SecondErrorQuestion = "Wilt u terugkeren naar de lijst?";

	protected override async Task OnInitializedAsync()
	{
		await ShowList();
	}

	public async Task ShowList()
	{
		BaseResponse<IEnumerable<AircraftListViewModel>> response = await _aircraftService.ListAllAsync();

		if (response.IsSucces)
		{
			aircrafts = response.Data;	
		}
		else
		{
			bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", $"{response.Status}\n{response.ErrorMessage}\n{errorQuestion}");

			if (confirmed)
			{
				await ShowList();
			}
		}
	}

	public async Task ShowDetails(object item)
	{
		AircraftListViewModel receivedModel = item as AircraftListViewModel;
		BaseResponse<AircraftDetailViewModel> response = await _aircraftService.GetByIdAsync(receivedModel.Id);

		if (response.IsSucces)
		{
			aircraft = response.Data;
			showDetails = true;
		}
		else
		{
			bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", $"{response.Status}\n{response.ErrorMessage}\n{errorQuestion}");

			if (confirmed)
			{
				await ShowDetails(item);
			}
		}
	}

	public async Task DeleteAsync(object item)
	{
		bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", "Ben je zeker dat je dit vliegtuig wilt verwijderen?");

		if (confirmed)
		{
			Guid id = (Guid)item;
			BaseResponse<AircraftListViewModel> response = await _aircraftService.DeleteAsync(id);

			if (response.IsSucces)
			{
				await ShowList();

				if (showDetails)
				{
					GoBack();
				}
			}
			else
			{
				await _jsRuntime.InvokeVoidAsync("alert", $"{response.Status}\n{response.ErrorMessage}");
			}
		}
	}

	public void GoBack()
	{
		showDetails = false;
		aircraft = null;
		formModel = null;
	}

	public async Task ShowForm(object item)
	{
		if (item == null)
		{
			isNew = true;
			formModel = new AircraftFormViewModel();
			formModel.FirstSeen = DateTime.Today;
			formModel.LastSeen = DateTime.Today;
			formModel.AirportIds = new List<Guid>();
			formPageTitle = "Nieuw vliegtuig";
		}
		else
		{
			BaseResponse<AircraftDetailViewModel> response = await _aircraftService.GetByIdAsync((Guid)item);

			if (response.IsSucces)
			{
				AircraftDetailViewModel aircraft = response.Data;
				LoadAircraftFormModel(aircraft);
				isNew = false;
				formPageTitle = $"{formModel.Registration} bewerken";
			}
			else
			{
				bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", $"{response.Status}\n{response.ErrorMessage}\n{errorQuestion}");

				if (confirmed)
				{
					await ShowForm(item);
					return;
				}
				else return;
			}
		}

		selectTypes = await GetTypesForInputSelect();
		if (selectTypes == null) return;

		selectAirlines = await GetAirlinesForInputSelect();
		if (selectAirlines == null) return;

		selectAirports = await GetAirportsForInputSelect();
	}

	public async Task SaveAsync()
	{
		if (isNew)
		{
			BaseResponse<AircraftListViewModel> response = await _aircraftService.AddAsync(formModel);

			if (!response.IsSucces)
			{
				await _jsRuntime.InvokeVoidAsync("alert", $"{response.Status}\n{response.ErrorMessage}");
				return;
			}
		}
		else
		{
			BaseResponse<AircraftListViewModel> response = await _aircraftService.UpdateAsync(formModel);

			if (!response.IsSucces)
			{
				await _jsRuntime.InvokeVoidAsync("alert", $"{response.Status}\n{response.ErrorMessage}");
				return;
			}
		}
		await ShowList();
		GoBack();
	}

	private async Task<IEnumerable<InputSelectItem>> GetTypesForInputSelect()
	{
		BaseResponse<AircraftType[]> response = await _aircraftService.GetAircraftTypes();

		if (!response.IsSucces)
		{
			bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", $"{response.Status}\n{response.ErrorMessage}\n{SecondErrorQuestion}");

			if (confirmed)
			{
				GoBack();
				return null;
			}
			else return null;
		}

		AircraftType[] types = response.Data;
		List<InputSelectItem> items = new List<InputSelectItem>();
		int i = 1;

		foreach (var type in types)
		{
			InputSelectItem item = new InputSelectItem { Value = type.Id, Label = type.Type };
			items.Add(item);
			i++;
		}
		return items;
	}

	private async Task<IEnumerable<InputSelectItem>> GetAirlinesForInputSelect()
	{
		BaseResponse<Airline[]> response = await _aircraftService.GetAirlines();

		if (!response.IsSucces)
		{
			bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", $"{response.Status}\n{response.ErrorMessage}\n{SecondErrorQuestion}");

			if (confirmed)
			{
				GoBack();
				return null;
			}
			else return null;
		}

		Airline[] airlines = response.Data;
		List<InputSelectItem> items = new List<InputSelectItem>();
		int i = 1;

		foreach (var airline in airlines)
		{
			InputSelectItem item = new InputSelectItem { Value = airline.Id, Label = airline.Name };
			items.Add(item);
			i++;
		}
		return items;
	}

	private async Task<IEnumerable<InputSelectItem>> GetAirportsForInputSelect()
	{
		BaseResponse<Airport[]> response = await _aircraftService.GetAirports();

		if (!response.IsSucces)
		{
			bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", $"{response.Status}\n{response.ErrorMessage}\n{SecondErrorQuestion}");

			if (confirmed)
			{
				GoBack();
				return null;
			}
			else return null;
		}

		Airport[] airports = response.Data;
		List<InputSelectItem> items = new List<InputSelectItem>();
		int i = 1;

		foreach (var airport in airports)
		{
			InputSelectItem item = new InputSelectItem { Value = airport.Id, Label = airport.Name };
			items.Add(item);
			i++;
		}
		return items;
	}

	private void LoadAircraftFormModel(AircraftDetailViewModel aircraft)
	{
		formModel = new AircraftFormViewModel
		{
			Id = aircraft.Id,
			Registration = aircraft.Registration,
			AircraftTypeId = aircraft.AircraftType.Id,
			AirlineId = aircraft.Airline.Id,
			HasSpecialLivery = aircraft.HasSpecialLivery,
			FirstSeen = aircraft.FirstSeen,
			LastSeen = aircraft.LastSeen,
		};

		List<Guid> ids = new List<Guid>();

		foreach (var airport in aircraft.Airports)
		{
			ids.Add(airport.Id);
		}
		formModel.AirportIds = ids;
	}
}
